"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.wsJsonToRes = exports.wsUserOp = exports.LemmyWebsocket = void 0;
const others_1 = require("./types/others");
/**
 * Helps build lemmy websocket message requests, that you can use in your Websocket sends.
 *
 * You'll receive back a [[WebSocketResponse]].
 *
 * The return types for these are given in [[LemmyHttp]]
 */
class LemmyWebsocket {
    constructor() { }
    /**
     * Log into lemmy.
     */
    login(form) {
        return wrapper(others_1.UserOperation.Login, form);
    }
    /**
     * A websocket join for your user.
     *
     * Allows your user to receive private messages and notifications.
     */
    userJoin(form) {
        return wrapper(others_1.UserOperation.UserJoin, form);
    }
    /**
     * A websocket join for the current post room.
     *
     * Allows your user to receive new comments and updates for that post.
     */
    postJoin(form) {
        return wrapper(others_1.UserOperation.PostJoin, form);
    }
    /**
     * A websocket join for a given community.
     *
     * Allows your user to receive community updates.
     *
     * Note: community_id: 0, is your front page.
     */
    communityJoin(form) {
        return wrapper(others_1.UserOperation.CommunityJoin, form);
    }
    /**
     * Register a new user.
     */
    register(register) {
        return wrapper(others_1.UserOperation.Register, register);
    }
    /**
     * Fetch a Captcha.
     */
    getCaptcha(form) {
        return wrapper(others_1.UserOperation.GetCaptcha, form);
    }
    /**
     * Create a new community.
     */
    createCommunity(form) {
        return wrapper(others_1.UserOperation.CreateCommunity, form);
    }
    /**
     * Edit a community.
     */
    editCommunity(form) {
        return wrapper(others_1.UserOperation.EditCommunity, form);
    }
    /**
     * Delete a community.
     */
    deleteCommunity(form) {
        return wrapper(others_1.UserOperation.DeleteCommunity, form);
    }
    /**
     * A moderator remove for a community.
     */
    removeCommunity(form) {
        return wrapper(others_1.UserOperation.RemoveCommunity, form);
    }
    /**
     * Follow / subscribe to a community.
     */
    followCommunity(form) {
        return wrapper(others_1.UserOperation.FollowCommunity, form);
    }
    /**
     * List communities, with various filters.
     */
    listCommunities(form) {
        return wrapper(others_1.UserOperation.ListCommunities, form);
    }
    /**
     * Create a post.
     */
    createPost(form) {
        return wrapper(others_1.UserOperation.CreatePost, form);
    }
    /**
     * Get / fetch a post.
     */
    getPost(form) {
        return wrapper(others_1.UserOperation.GetPost, form);
    }
    /**
     * Get / fetch a community.
     */
    getCommunity(form) {
        return wrapper(others_1.UserOperation.GetCommunity, form);
    }
    /**
     * Create a comment.
     */
    createComment(form) {
        return wrapper(others_1.UserOperation.CreateComment, form);
    }
    /**
     * Edit a comment.
     */
    editComment(form) {
        return wrapper(others_1.UserOperation.EditComment, form);
    }
    /**
     * Delete a comment.
     */
    deleteComment(form) {
        return wrapper(others_1.UserOperation.DeleteComment, form);
    }
    /**
     * A moderator remove for a comment.
     */
    removeComment(form) {
        return wrapper(others_1.UserOperation.RemoveComment, form);
    }
    /**
     * Mark a comment as read.
     */
    markCommentReplyAsRead(form) {
        return wrapper(others_1.UserOperation.MarkCommentReplyAsRead, form);
    }
    /**
     * Like / vote on a comment.
     */
    likeComment(form) {
        return wrapper(others_1.UserOperation.CreateCommentLike, form);
    }
    /**
     * Save a comment.
     */
    saveComment(form) {
        return wrapper(others_1.UserOperation.SaveComment, form);
    }
    /**
     * Report a comment.
     */
    createCommentReport(form) {
        return wrapper(others_1.UserOperation.CreateCommentReport, form);
    }
    /**
     * Resolve a comment report. Only a mod can do this.
     */
    resolveCommentReport(form) {
        return wrapper(others_1.UserOperation.ResolveCommentReport, form);
    }
    /**
     * List comment reports.
     */
    listCommentReports(form) {
        return wrapper(others_1.UserOperation.ListCommentReports, form);
    }
    /**
     * Get / fetch posts, with various filters.
     */
    getPosts(form) {
        return wrapper(others_1.UserOperation.GetPosts, form);
    }
    /**
     * Get / fetch comments.
     */
    getComments(form) {
        return wrapper(others_1.UserOperation.GetComments, form);
    }
    /**
     * Get / fetch comment.
     */
    getComment(form) {
        return wrapper(others_1.UserOperation.GetComment, form);
    }
    /**
     * Like / vote on a post.
     */
    likePost(form) {
        return wrapper(others_1.UserOperation.CreatePostLike, form);
    }
    /**
     * Edit a post.
     */
    editPost(form) {
        return wrapper(others_1.UserOperation.EditPost, form);
    }
    /**
     * Delete a post.
     */
    deletePost(form) {
        return wrapper(others_1.UserOperation.DeletePost, form);
    }
    /**
     * A moderator remove for a post.
     */
    removePost(form) {
        return wrapper(others_1.UserOperation.RemovePost, form);
    }
    /**
     * A moderator can lock a post ( IE disable new comments ).
     */
    lockPost(form) {
        return wrapper(others_1.UserOperation.LockPost, form);
    }
    /**
     * A moderator can feature a post ( IE stick it to the top of a community ).
     */
    featurePost(form) {
        return wrapper(others_1.UserOperation.FeaturePost, form);
    }
    /**
     * Mark a post as read.
     */
    markPostAsRead(form) {
        return wrapper(others_1.UserOperation.MarkPostAsRead, form);
    }
    /**
     * Save a post.
     */
    savePost(form) {
        return wrapper(others_1.UserOperation.SavePost, form);
    }
    /**
     * Report a post.
     */
    createPostReport(form) {
        return wrapper(others_1.UserOperation.CreatePostReport, form);
    }
    /**
     * Resolve a post report. Only a mod can do this.
     */
    resolvePostReport(form) {
        return wrapper(others_1.UserOperation.ResolvePostReport, form);
    }
    /**
     * List post reports.
     */
    listPostReports(form) {
        return wrapper(others_1.UserOperation.ListPostReports, form);
    }
    /**
     * Fetch metadata for any given site.
     */
    getSiteMetadata(form) {
        return wrapper(others_1.UserOperation.GetSiteMetadata, form);
    }
    /**
     * Ban a user from a community.
     */
    banFromCommunity(form) {
        return wrapper(others_1.UserOperation.BanFromCommunity, form);
    }
    /**
     * Add a moderator to your community.
     */
    addModToCommunity(form) {
        return wrapper(others_1.UserOperation.AddModToCommunity, form);
    }
    /**
     * Transfer your community to an existing moderator.
     */
    transferCommunity(form) {
        return wrapper(others_1.UserOperation.TransferCommunity, form);
    }
    /**
     * Leave the Site admins.
     */
    leaveAdmin(form) {
        return wrapper(others_1.UserOperation.LeaveAdmin, form);
    }
    /**
     * Ban a person from your site.
     */
    banPerson(form) {
        return wrapper(others_1.UserOperation.BanPerson, form);
    }
    /**
     * Get a list of banned users
     */
    getBannedPersons(form) {
        return wrapper(others_1.UserOperation.GetBannedPersons, form);
    }
    /**
     * Add an admin to your site.
     */
    addAdmin(form) {
        return wrapper(others_1.UserOperation.AddAdmin, form);
    }
    /**
     * Get the unread registration applications count.
     */
    getUnreadRegistrationApplicationCount(form) {
        return wrapper(others_1.UserOperation.GetUnreadRegistrationApplicationCount, form);
    }
    /**
     * List the unread registration applications.
     */
    listRegistrationApplications(form) {
        return wrapper(others_1.UserOperation.ListRegistrationApplications, form);
    }
    /**
     * Approve a registration application
     */
    approveRegistrationApplication(form) {
        return wrapper(others_1.UserOperation.ApproveRegistrationApplication, form);
    }
    /**
     * Get the details for a person.
     */
    getPersonDetails(form) {
        return wrapper(others_1.UserOperation.GetPersonDetails, form);
    }
    /**
     * Get comment replies.
     */
    getReplies(form) {
        return wrapper(others_1.UserOperation.GetReplies, form);
    }
    /**
     * Get mentions for your user.
     */
    getPersonMentions(form) {
        return wrapper(others_1.UserOperation.GetPersonMentions, form);
    }
    /**
     * Mark a person mention as read.
     */
    markPersonMentionAsRead(form) {
        return wrapper(others_1.UserOperation.MarkPersonMentionAsRead, form);
    }
    /**
     * Get the modlog.
     */
    getModlog(form) {
        return wrapper(others_1.UserOperation.GetModlog, form);
    }
    /**
     * Create your site.
     */
    createSite(form) {
        return wrapper(others_1.UserOperation.CreateSite, form);
    }
    /**
     * Edit your site.
     */
    editSite(form) {
        return wrapper(others_1.UserOperation.EditSite, form);
    }
    /**
     * Gets the site, and your user data.
     */
    getSite(form) {
        return wrapper(others_1.UserOperation.GetSite, form);
    }
    /**
     * Search lemmy.
     */
    search(form) {
        return wrapper(others_1.UserOperation.Search, form);
    }
    /**
     * Fetch a non-local / federated object.
     */
    resolveObject(form) {
        return wrapper(others_1.UserOperation.ResolveObject, form);
    }
    /**
     * Mark all replies as read.
     */
    markAllAsRead(form) {
        return wrapper(others_1.UserOperation.MarkAllAsRead, form);
    }
    /**
     * Save your user settings.
     */
    saveUserSettings(form) {
        return wrapper(others_1.UserOperation.SaveUserSettings, form);
    }
    /**
     * Change your user password.
     */
    changePassword(form) {
        return wrapper(others_1.UserOperation.ChangePassword, form);
    }
    /**
     * Get counts for your reports
     */
    getReportCount(form) {
        return wrapper(others_1.UserOperation.GetReportCount, form);
    }
    /**
     * Get your unread counts
     */
    getUnreadCount(form) {
        return wrapper(others_1.UserOperation.GetUnreadCount, form);
    }
    /**
     * Verify your email
     */
    verifyEmail(form) {
        return wrapper(others_1.UserOperation.VerifyEmail, form);
    }
    /**
     * Delete your account.
     */
    deleteAccount(form) {
        return wrapper(others_1.UserOperation.DeleteAccount, form);
    }
    /**
     * Reset your password.
     */
    passwordReset(form) {
        return wrapper(others_1.UserOperation.PasswordReset, form);
    }
    /**
     * Change your password from an email / token based reset.
     */
    passwordChange(form) {
        return wrapper(others_1.UserOperation.PasswordChangeAfterReset, form);
    }
    /**
     * Create a private message.
     */
    createPrivateMessage(form) {
        return wrapper(others_1.UserOperation.CreatePrivateMessage, form);
    }
    /**
     * Edit a private message.
     */
    editPrivateMessage(form) {
        return wrapper(others_1.UserOperation.EditPrivateMessage, form);
    }
    /**
     * Delete a private message.
     */
    deletePrivateMessage(form) {
        return wrapper(others_1.UserOperation.DeletePrivateMessage, form);
    }
    /**
     * Mark a private message as read.
     */
    markPrivateMessageAsRead(form) {
        return wrapper(others_1.UserOperation.MarkPrivateMessageAsRead, form);
    }
    /**
     * Get / fetch private messages.
     */
    getPrivateMessages(form) {
        return wrapper(others_1.UserOperation.GetPrivateMessages, form);
    }
    /**
     * Create a report for a private message.
     */
    createPrivateMessageReport(form) {
        return wrapper(others_1.UserOperation.CreatePrivateMessageReport, form);
    }
    /**
     * Resolve a report for a private message.
     */
    resolvePrivateMessageReport(form) {
        return wrapper(others_1.UserOperation.ResolvePrivateMessageReport, form);
    }
    /**
     * List private message reports.
     */
    listPrivateMessageReports(form) {
        return wrapper(others_1.UserOperation.ListPrivateMessageReports, form);
    }
    /**
     * Block a person.
     */
    blockPerson(form) {
        return wrapper(others_1.UserOperation.BlockPerson, form);
    }
    /**
     * Block a community.
     */
    blockCommunity(form) {
        return wrapper(others_1.UserOperation.BlockCommunity, form);
    }
    /**
     * Purge / Delete a person from the database.
     */
    purgePerson(form) {
        return wrapper(others_1.UserOperation.PurgePerson, form);
    }
    /**
     * Purge / Delete a community from the database.
     */
    purgeCommunity(form) {
        return wrapper(others_1.UserOperation.PurgeCommunity, form);
    }
    /**
     * Purge / Delete a post from the database.
     */
    purgePost(form) {
        return wrapper(others_1.UserOperation.PurgePost, form);
    }
    /**
     * Purge / Delete a comment from the database.
     */
    purgeComment(form) {
        return wrapper(others_1.UserOperation.PurgeComment, form);
    }
    /**
     * Create a custom emoji
     */
    createCustomEmoji(form) {
        return wrapper(others_1.UserOperation.CreateCustomEmoji, form);
    }
    /**
     * Edit a custom emoji
     */
    editCustomEmoji(form) {
        return wrapper(others_1.UserOperation.EditCustomEmoji, form);
    }
    /**
     * Delete a custom emoji
     */
    deleteCustomEmoji(form) {
        return wrapper(others_1.UserOperation.DeleteCustomEmoji, form);
    }
    /**
     * Fetch federated instances.
     */
    getFederatedInstances(form) {
        return wrapper(others_1.UserOperation.GetFederatedInstances, form);
    }
}
exports.LemmyWebsocket = LemmyWebsocket;
function wrapper(op, data) {
    let send = JSON.stringify({ op: others_1.UserOperation[op], data });
    return send;
}
function wsUserOp(msg) {
    let opStr = msg.op;
    return others_1.UserOperation[opStr];
}
exports.wsUserOp = wsUserOp;
/**
 * Converts a websocket string response to a usable result
 */
// TODO is this still necessary?
function wsJsonToRes(msg) {
    // Have to deserialize the response again into the correct class
    return msg.data;
}
exports.wsJsonToRes = wsJsonToRes;
